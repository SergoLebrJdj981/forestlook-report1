import streamlit as st
import pandas as pd
import difflib
from io import BytesIO
from datetime import datetime

st.set_page_config(page_title="FORESTLOOK: –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–±—ã–ª–∏", layout="wide")
st.title("üìä FORESTLOOK ‚Äî –ï–¥–∏–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ –ø—Ä–∏–±—ã–ª–∏ –∑–∞ –Ω–µ–¥–µ–ª—é")
st.markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–≤–∞ Excel-—Ñ–∞–π–ª–∞: Wildberries-–æ—Ç—á—ë—Ç –∏ —é–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫—É")

wb_file = st.file_uploader("üì§ –û—Ç—á—ë—Ç Wildberries (.xlsx)", type="xlsx")
unit_file = st.file_uploader("üì§ –Æ–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫–∞ (.xlsx)", type="xlsx")

def classify(row):
    if row["–ü—Ä–æ–¥–∞–∂ –∑–∞ –Ω–µ–¥–µ–ª—é"] < 10:
        return "–¢–µ—Å—Ç"
    if row["–ü—Ä–∏–±—ã–ª—å —Å 1 —à—Ç"] < 0 or row["ROI"] < 20:
        return "–ë–∞–ª–ª–∞—Å—Ç"
    if row["ROI"] < 40:
        return "–í–∏—Ç—Ä–∏–Ω–∞"
    if row["ROI"] >= 60 and row["–ü—Ä–∏–±—ã–ª—å —Å 1 —à—Ç"] >= 300:
        return "–§–ª–∞–≥–º–∞–Ω"
    return "–û–±—ã—á–Ω—ã–π"

if wb_file and unit_file:
    wb_sheets = pd.read_excel(wb_file, sheet_name=None)
    wb_data = wb_sheets['–¢–æ–≤–∞—Ä—ã'].iloc[1:].copy()
    wb_data.columns = wb_sheets['–¢–æ–≤–∞—Ä—ã'].iloc[0]

    df_wb = wb_data[[
        "–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥–∞–≤—Ü–∞", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞, ‚ÇΩ", "–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –≤ –¥–µ–Ω—å, —à—Ç",
        "–û—Å—Ç–∞—Ç–∫–∏ —Å–∫–ª–∞–¥ –í–ë, —à—Ç", "–û—Å—Ç–∞—Ç–∫–∏ –ú–ü, —à—Ç"
    ]].copy()
    df_wb.columns = ["–ê—Ä—Ç–∏–∫—É–ª", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞", "–ü—Ä–æ–¥–∞–∂ –≤ –¥–µ–Ω—å", "–û—Å—Ç–∞—Ç–æ–∫ –í–ë", "–û—Å—Ç–∞—Ç–æ–∫ –ú–ü"]
    df_wb["–ü—Ä–æ–¥–∞–∂ –∑–∞ –Ω–µ–¥–µ–ª—é"] = (pd.to_numeric(df_wb["–ü—Ä–æ–¥–∞–∂ –≤ –¥–µ–Ω—å"], errors="coerce") * 7).round()

    unit_raw = pd.read_excel(unit_file)
    unit_raw["–ù–∞–∑–≤–∞–Ω–∏–µ"] = unit_raw.iloc[:, 0]
    unit_raw["–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å"] = pd.to_numeric(unit_raw.iloc[:, 8], errors="coerce")
    unit_raw["ROI"] = pd.to_numeric(unit_raw.iloc[:, 19], errors="coerce")
    unit_raw["–ü—Ä–∏–±—ã–ª—å —Å 1 —à—Ç"] = pd.to_numeric(unit_raw.iloc[:, 28], errors="coerce")
    unit_clean = unit_raw[["–ù–∞–∑–≤–∞–Ω–∏–µ", "–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å", "ROI", "–ü—Ä–∏–±—ã–ª—å —Å 1 —à—Ç"]].dropna()

    def match_name(name, choices):
        match = difflib.get_close_matches(name, choices, n=1, cutoff=0.4)
        return match[0] if match else None

    df_wb["–ù–∞–∑–≤–∞–Ω–∏–µ —é–Ω–∏—Ç"] = df_wb["–ù–∞–∑–≤–∞–Ω–∏–µ"].apply(lambda x: match_name(x, unit_clean["–ù–∞–∑–≤–∞–Ω–∏–µ"]))
    df_merged = pd.merge(df_wb, unit_clean, left_on="–ù–∞–∑–≤–∞–Ω–∏–µ —é–Ω–∏—Ç", right_on="–ù–∞–∑–≤–∞–Ω–∏–µ", how="left")

    df_merged["–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å –∑–∞ –Ω–µ–¥–µ–ª—é"] = (df_merged["–ü—Ä–æ–¥–∞–∂ –∑–∞ –Ω–µ–¥–µ–ª—é"] * df_merged["–ü—Ä–∏–±—ã–ª—å —Å 1 —à—Ç"]).round(2)
    df_merged["–°—Ç–∞—Ç—É—Å"] = df_merged.apply(classify, axis=1)

    st.success("‚úÖ –û—Ç—á—ë—Ç –≥–æ—Ç–æ–≤")
    st.dataframe(df_merged, use_container_width=True)

    def convert_df(df):
        output = BytesIO()
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            df.to_excel(writer, index=False, sheet_name="–û—Ç—á—ë—Ç FORESTLOOK")
        return output.getvalue()

    excel_data = convert_df(df_merged)
    filename = f"FORESTLOOK_–æ—Ç—á–µ—Ç_{datetime.today().strftime('%Y-%m-%d')}.xlsx"

    st.download_button(
        label="üì• –°–∫–∞—á–∞—Ç—å Excel-–æ—Ç—á—ë—Ç",
        data=excel_data,
        file_name=filename,
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )
